openapi: 3.0.3
info:
  description: >-
    The Chia node and services come with a JSON RPC API server that allows you to access information and control the services. 
    These are accessible via HTTPS, WebSockets, or via client SDKs. The ports can be configured in `~/.chia/mainnet/config/config.yaml`. 
    The RPC ports should not be exposed to the internet. TLS certificates are used to secure the communication 
    [using mutualTLS](https://github.com/dkackman/chia-api/wiki/Mutual-TLS).

    The farmer uses port 8559 by default.
  version: 2.4.3
  title: Chia RPC
  termsOfService: https://www.chia.net/assets/legal/Guidelines-for-Using-Chia-Network.pdf
  contact:
    name: Chia Network
    url: https://www.chia.net/
    email: hello@chia.net
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://localhost:8559
    description: Farmer RPC
security:
  - bearerAuth: []
components:
  requestBodies:
    empty:
      $ref: "requestBodies/empty.yaml#/empty"
  responses:
    empty:
      $ref: "responses/empty.yaml#/empty"
  schemas:
    connection_info:
      $ref: "schemas/connection_info.yaml#/connection_info"
    harvester_info:
      $ref: "schemas/harvester_info.yaml#/harvester_info"
    harvester_summary:
      $ref: "schemas/harvester_summary.yaml#/harvester_summary"
    network_info:
      $ref: "schemas/network_info.yaml#/network_info"
    paginated_plot_request:
      $ref: "schemas/paginated_plot_request.yaml#/paginated_plot_request"
    pool_state_info:
      $ref: "schemas/pool_state_info.yaml#/pool_state_info"
    plot_info_request_data:
      $ref: "schemas/plot_info_request_data.yaml#/plot_info_request_data"
    plot_path_request_data:
      $ref: "schemas/plot_path_request_data.yaml#/plot_path_request_data"
    proof_of_space:
      $ref: "schemas/proof_of_space.yaml#/proof_of_space"
    farmer_signage_point:
      $ref: "schemas/farmer_signage_point.yaml#/farmer_signage_point"
    signage_point_bundle:
      type: object
      properties:
        signage_point:
          $ref: "#/components/schemas/farmer_signage_point"
        proofs:
          # i haven't found this populated in the wild so this is based by examining the python
          # probably wrong but based off of this in farmer.py - line 105
          # Keep track of harvester plot identifier (str), target sp index, and PoSpace for each challenge
          # self.proofs_of_space: Dict[bytes32, List[Tuple[str, ProofOfSpace]]] = {}
          type: array
          # tuple is better supported in openapi 3.1.0
          # https://stackoverflow.com/questions/57464633/how-to-define-a-json-array-with-concrete-item-definition-for-every-index-i-e-a
          items:
            oneOf:
              - type: string
              - $ref: "#/components/schemas/proof_of_space"
            minItems: 2
            maxItems: 2
    apiResponse:
      $ref: "schemas/apiResponse.yaml#/apiResponse"
  securitySchemes:
    bearerAuth:
      $ref: "securitySchemes/bearerAuth.yaml#/bearerAuth"
tags:
  - name: Shared
    description: Methods shared by all services.
  - name: Farmer
    description: The farmer RPC API is exposed, by default, on port 8559 and contains methods for managing the farmer.
paths:
  /stop_node:
    post:
      tags:
        - Shared
      summary: Stop the node.
      description: Stop the node.
      operationId: stop_node
      requestBody:
        $ref: "#/components/requestBodies/empty"
      responses:
        "200":
          $ref: "#/components/responses/empty"
  /open_connection:
    post:
      tags:
        - Shared
      summary: Add a connection to another node.
      description: Add a connection to another node.
      operationId: open_connection
      requestBody:
        required: true
        description: the address of the connection
        content:
          application/json:
            schema:
              type: object
              required:
                - ip
                - port
              properties:
                ip:
                  type: string
                  format: ipaddress
                port:
                  type: integer
      responses:
        "200":
          $ref: "#/components/responses/empty"
  /close_connection:
    post:
      tags:
        - Shared
      summary: Removes a connection.
      description: Removes a connection.
      operationId: close_connection
      requestBody:
        required: true
        description: the node id of the connection
        content:
          application/json:
            schema:
              type: object
              required:
                - node_id
              properties:
                node_id:
                  type: string
      responses:
        "200":
          $ref: "#/components/responses/empty"
  /get_connections:
    post:
      tags:
        - Shared
      summary: Retrieve the list of connections.
      description: Retrieve the list of connections.
      operationId: get_connections
      requestBody:
        $ref: "#/components/requestBodies/empty"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      connections:
                        type: array
                        items:
                          $ref: "#/components/schemas/connection_info"
                  - $ref: "#/components/schemas/apiResponse"
  /healthz:
    post:
      tags:
        - Shared
      summary: Heartbeat.
      description: Heartbeat.
      operationId: healthz
      requestBody:
        $ref: "#/components/requestBodies/empty"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiResponse"
  /get_routes:
    post:
      tags:
        - Shared
      summary: Retrieve the list of routes exposed by the service.
      description: Retrieve the list of routes/endpoints exposed by the service.
      operationId: get_routes
      requestBody:
        $ref: "#/components/requestBodies/empty"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      routes:
                        type: array
                        items:
                          type: string
                  - $ref: "#/components/schemas/apiResponse"
  /set_reward_targets:
    post:
      tags:
        - Farmer
      summary: Set the farm and pool reward targets.
      description: Set the farm and pool reward targets.
      operationId: set_reward_targets
      requestBody:
        description: The updated targets
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                farmer_target:
                  type: "string"
                pool_target:
                  type: "string"
      responses:
        "200":
          $ref: "#/components/responses/empty"
  /get_reward_targets:
    post:
      tags:
        - Farmer
      summary: Get the farm and pool reward targets.
      description: Get the farm and pool reward targets.
      operationId: get_reward_targets
      requestBody:
        description: indicator of whether to include private keys in the search
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - search_for_private_key
              properties:
                search_for_private_key:
                  type: boolean
                max_ph_to_search:
                  type: integer
                  format: int32
                  default: 500
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    required:
                      - farmer_target
                      - pool_target
                    properties:
                      farmer_target:
                        type: "string"
                      pool_target:
                        type: "string"
                      have_farmer_sk:
                        type: "boolean"
                      have_pool_sk:
                        type: "boolean"
                  - $ref: "#/components/schemas/apiResponse"
  /get_harvesters:
    post:
      tags:
        - Farmer
      summary: Get the list of harvesters.
      description: Get the list of harvesters.
      operationId: get_harvesters
      requestBody:
        $ref: "#/components/requestBodies/empty"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      harvesters:
                        type: array
                        items:
                          $ref: "#/components/schemas/harvester_info"
                  - $ref: "#/components/schemas/apiResponse"
  /get_harvesters_summary:
    post:
      tags:
        - Farmer
      summary: Get a summary of harvesters.
      description: Get a summary of harvesters, similar to get_harvests but with plot counts only.
      operationId: get_harvesters_summary
      requestBody:
        $ref: "#/components/requestBodies/empty"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      harvesters:
                        type: array
                        items:
                          $ref: "#/components/schemas/harvester_summary"
                  - $ref: "#/components/schemas/apiResponse"
  /get_harvester_plots_valid:
    post:
      tags:
        - Farmer
      summary: Get a paginated list of valid plots.
      description: Get a paginated list of valid plots.
      operationId: get_harvester_plots_valid
      requestBody:
        description: Search filter parameters
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/plot_info_request_data"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/paginated_plot_request"
                  - $ref: "#/components/schemas/apiResponse"
  /get_harvester_plots_invalid:
    post:
      tags:
        - Farmer
      summary: Get a paginated list of invalid plots.
      description: Get a paginated list of invalid plots.
      operationId: get_harvester_plots_invalid
      requestBody:
        description: Search filter parameters
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/plot_path_request_data"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/paginated_plot_request"
                  - $ref: "#/components/schemas/apiResponse"
  /get_harvester_plots_keys_missing:
    post:
      tags:
        - Farmer
      summary: Get a paginated list of plots with missing keys.
      description: Get a paginated list of invalid plots with missing keys.
      operationId: get_harvester_plots_keys_missing
      requestBody:
        description: Search filter parameters
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/plot_path_request_data"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/paginated_plot_request"
                  - $ref: "#/components/schemas/apiResponse"
  /get_harvester_plots_duplicates:
    post:
      tags:
        - Farmer
      summary: Get a paginated list of duplicate plots.
      description: Get a paginated list of duplicate plots.
      operationId: get_harvester_plots_duplicates
      requestBody:
        description: Search filter parameters
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/plot_path_request_data"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/paginated_plot_request"
                  - $ref: "#/components/schemas/apiResponse"
  /get_pool_login_link:
    post:
      tags:
        - Farmer
      summary: Get's the pool login link, if any.
      description: Get's the pool login link, if any.
      operationId: get_pool_login_link
      requestBody:
        description: The id of the pool launcher
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - launcher_id
              properties:
                launcher_id:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      login_link:
                        type: string
                        format: url
                  - $ref: "#/components/schemas/apiResponse"
  /get_pool_state:
    post:
      tags:
        - Farmer
      summary: Get's the state of the pool.
      description: Get's the state of the pool.
      operationId: get_pool_state
      requestBody:
        $ref: "#/components/requestBodies/empty"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      pool_state:
                        $ref: "#/components/schemas/pool_state_info"
                  - $ref: "#/components/schemas/apiResponse"
  /set_payout_instructions:
    post:
      tags:
        - Farmer
      summary: Set's a pool's payout instructions.
      description: Set's a pool's payout instructions.
      operationId: set_payout_instructions
      requestBody:
        description: The id of the pool launcher and payout instructions
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - launcher_id
                - payout_instructions
              properties:
                launcher_id:
                  type: string
                payout_instructions:
                  type: string
      responses:
        "200":
          $ref: "#/components/responses/empty"
  /get_signage_point:
    post:
      tags:
        - Farmer
      summary: Get's a signage point by hash.
      description: Get's a signage point by hash.
      operationId: get_signage_point
      requestBody:
        description: The signage point hash
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sp_hash
              properties:
                sp_hash:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/signage_point_bundle"
                  - $ref: "#/components/schemas/apiResponse"
  /get_signage_points:
    post:
      tags:
        - Farmer
      summary: Get signage points.
      description: Get signage points.
      operationId: get_signage_points
      requestBody:
        $ref: "#/components/requestBodies/empty"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      signage_points:
                        type: array
                        items:
                          $ref: "#/components/schemas/signage_point_bundle"
                  - $ref: "#/components/schemas/apiResponse"
  /get_network_info:
    post:
      tags:
        - Shared
      description: Retrieves some information about the current network.
      summary: Retrieves some information about the current network.
      operationId: full_node_get_network_info
      requestBody:
        $ref: "#/components/requestBodies/empty"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/network_info"
                  - $ref: "#/components/schemas/apiResponse"
  /get_version:
    post:
      tags:
        - Shared
      summary: Get the installed version of chia at the endpoint.
      description: Get the installed version of chia at the endpoint.
      operationId: get_version
      requestBody:
        $ref: "#/components/requestBodies/empty"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      version:
                        type: string
                  - $ref: "#/components/schemas/apiResponse"
externalDocs:
  description: Find out more about chia
  url: https://chia.net
